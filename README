Tools: Java, JavaScript, CSS, HTML

Motivation: After completing my first project using Spring Boot, I was eager to learn even more things about this framework and how could it be
used to create more complex applications.

Utility: I developed a real-time chat application featuring an input field, send button and message display area. The group chat functionality
was built using WebSockets and the STOMP protocol. Additionally, I implemented a basic login system, enhanced the message format to include the
sender's name and timestamp and introduced a new section that displays a list of currently active users.

Development:
    static:
        index.html - A HTML structure that represents the front-end for the real-time chat application;
                    Users are able to enter their username to join the chat, see the list of all online users and also communicate with others through chat box.

        script.js - this script enables real-time messaging through WebSockets, managed by a STOMP client;
                    Messages and user lists are dynamically updated with every event that happens.

        style.css - this CSS provides a functional layout for the application, having different sections for online users and messages;
                    What is more, you can easily navigate to the list of messages or online users due to the scrolling bars;
                    The layout is also a dynamic one, being able to adapt to different screen sizes.


    src/chat:
        ChatController.java
            -> When a user send a message, all the the other users are notified via the /topic/messages WebSocket topic;
            -> When a user logs in or logs out, all the users are notified via the /topic/users WebSocket topic and their lists of online users are updated accordingly.
            -> Users can retrieve previously sent messages via the /previous-messages HTTP endpoint when they join.

        Main.java - the start/ entry point of the application

        Message.java - a class designed to handle more properly all the messages between the users

        WebSocketConfig.java - here is where the WebSocket communication with STOMP protocol is enabled through configuration;
                Message transmission:
                    -> Messages sent to the server will start with /app and they will be routed to methods annotated with @MessageMapping.
                    -> The server broadcasts messages to topics prefixed with /topic and clients subscribed to those topics will receive the messages.
                    -> SockJS Fallback: If WebSocket is not supported by the client or the server, SockJS will be used as a fallback to ensure communication works.

        WebSocketEvents.java - connection handling
            -> When a user connects via WebSocket, the handleConnect() method adds them to the list of online users and broadcasts the updated list to all clients.
            -> When a user disconnects, the handleDisconnect() method removes them from the list and also broadcasts the updated list.
            -> The broadcastOnlineUsers() method ensures that all connected clients receive real-time updates about the list of online users via the /topic/users topic.
